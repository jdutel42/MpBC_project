}
} else {
# Si trop petit ou trop grand pour shapiro, on fait un test non paramétrique
test_result <- wilcox.test(scores_bras, scores_autres)
}
return(test_result$p.value)
})
# Corrigé la liste de pval obtenue via Benjamini-Hochberg (en fonction du nombre de test effectués)
p_values_adj_BH <- p.adjust(p_values, method = "BH")
p_values_adj_Bonferroni <- p.adjust(p_values, method = "bonferroni")
# Stocker les résultats dans une dataframe
df_p_values_patient <-
data.frame(Patient = sample_name,
Bras_chromosomique = unique(df_diff$Bras_chromosomique),
p_value = p_values,
p_value_adj_BH = p_values_adj_BH,
p_value_adj_Bonferroni = p_values_adj_Bonferroni) # %>%
# FIltrer les p_val_adj > seuil
# filter(p_value_adj < seuil)
df_p_values_1vsAll <- bind_rows(df_p_values_1vsAll, df_p_values_patient)
print(paste0("✅ Test stat 1VsAll pour ", sample_name, " terminé !"))
# Diff de 0 ?
#### Comparer si les scores normalisés sont significativement différent de 0 ####
p_values2 <- sapply(unique(df_diff$Bras_chromosomique), function(bras) {
scores_bras <- unique(df_diff$diff_median_CNA_score_norm[df_diff$Bras_chromosomique == bras])
print(paste("Bras : ", bras))
print(paste("Nombre de cytobandes dans le bras : ", length(scores_bras)))
# Vérification du nombre d'observations
if (length(scores_bras) < 2) {
return(NA)  # Retourne NA si un groupe a moins de 2 valeurs
}
# Test de normalité sur toutes les médianes
if (length(scores_bras) >= 3 && length(scores_bras) <= 5000) {
if (shapiro.test(scores_bras)$p.value > 0.05) {
test_result <- t.test(scores_bras, mu = 0)
} else {
test_result <- wilcox.test(scores_bras, mu = 0)
}
} else {
# Si trop petit ou trop grand pour shapiro, on fait un test non paramétrique
test_result <- wilcox.test(scores_bras, mu = 0)
}
return(test_result$p.value)
})
# Corrigé la liste de pval obtenue via Benjamini-Hochberg (en fonction du nombre de test effectués)
p_values_adj2_BH <- p.adjust(p_values2, method = "BH")
p_values_adj2_Bonferroni <- p.adjust(p_values2, method = "bonferroni")
# Stocker les résultats dans une dataframe
df_p_values_patient2 <-
data.frame(Patient = sample_name,
Bras_chromosomique = unique(df_diff$Bras_chromosomique),
p_value2 = p_values2,
p_value_adj2_BH = p_values_adj2_BH,
p_values_adj2_Bonferroni = p_values_adj2_Bonferroni) # %>%
# FIltrer les p_val_adj > seuil
# filter(p_value_adj2 < seuil)
df_p_values_diff0 <- bind_rows(df_p_values_diff0, df_p_values_patient2)
print(paste0("✅ Test stat Diff0 pour ", sample_name, " terminé !"))
}
df_p_values <-
df_p_values_1vsAll %>%
left_join(df_p_values_diff0, by = c("Patient", "Bras_chromosomique")) %>%
mutate(Bras_chromosomique = factor(Bras_chromosomique, levels = mixedsort(unique(Bras_chromosomique)))) %>%
rename(
p_value_1vsAll = p_value,
p_value_adj_BH_1vsAll = p_value_adj_BH,
p_value_adj_Bonferroni_1vsAll = p_value_adj_Bonferroni,
p_value_diff0 = p_value2,
p_value_adj_BH_diff0 = p_value_adj2_BH,
p_value_adj_Bonferroni_diff0 = p_values_adj2_Bonferroni
)
df_pval_size_effect <- df_p_values %>%
select(Patient, Bras_chromosomique, p_value_adj_Bonferroni_1vsAll) %>%
left_join(df_size_effect, by = c("Patient", "Bras_chromosomique")) %>%
mutate(Bras_chromosomique = factor(Bras_chromosomique, levels = mixedsort(unique(Bras_chromosomique)))) %>%
arrange(p_value_adj_Bonferroni_1vsAll) %>%
mutate(FC = -log10(p_value_adj_Bonferroni_1vsAll),
Label_point = paste0(Patient, "_", Bras_chromosomique))
df_plot_size_effect <- df_pval_size_effect %>%
filter(p_value_adj_Bonferroni_1vsAll < seuil)
# # Trier les données par p-value ajustée croissante et sélectionner les 20 premiers
# df_top_20 <- df_plot_size_effect %>%
#   arrange(p_value_adj_Bonferroni_1vsAll) %>%
#   head(20)
library(ggrepel)
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = FC, y = size_effect)) +
geom_point(aes(color = Bras_chromosomique), size = 3) +  # Affiche tous les points
geom_text_repel(data = df_plot_size_effect, aes(label = Label_point), max.overlaps = 20) +  # Utilise ggrepel pour ajuster les labels
# geom_text(data = df_plot_size_effect, aes(label = Label_point), hjust = 1, vjust = 0.5, size = 3) +  # Ajoute les labels seulement aux 20 premiers points
labs(title = "-Log10 p-values ajusted & size effect",
x = "-log10(p-value adj)",
y = "Size effect (median difference)",
color = "Chromosomic Arms") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotation des labels de l'axe X pour plus de lisibilité
axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))  # Style du titre
plot_size_effect
output_dir <- "/mnt/datadisk/Jordan/Results/CNA/InferCNVPlus/Size_Effect_Plot"
# Vérifier si le dossier existe, sinon le créer
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Sauvegarder le plot
ggsave(plot_size_effect, filename = paste0(output_dir, "/Size_Effect_Plot.png"), width = 20, height = 10)
# Connaitre les quantiles de size_effect
quantile(df_size_effect$size_effect, probs = c(0.75, 0.9, 0.95))
hist(df_size_effect$size_effect, breaks = 50)
# Connaitre les quantiles de size_effect
quantile(df_size_effect$size_effect, probs = c(0.75, 0.9, 0.95))
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
# df_plot_size_effect <- df_pval_size_effect %>%
#   filter(p_value_adj_Bonferroni_1vsAll < seuil)
df_plot_size_effect <- df_pval_size_effect
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
hist(df_size_effect$size_effect, breaks = 50)
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
hist(df_size_effect$size_effect, breaks = 50)
# Faire un Volcano Plot
df_plot_size_effect$significance <- "Weak effect size"
df_plot_size_effect$significance[df_plot_size_effect$size_effect > 0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong amplification"
df_plot_size_effect$significance[df_plot_size_effect$size_effect < -0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong deletion"
library(ggplot2)
library(ggrepel)
# Plot
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = size_effect,
y = FC,
color = significance)) +
geom_point(alpha = 0.6, size = 2) +
# Ajouter les labels sans chevauchement
geom_text_repel(
aes(label = ifelse(FC > 10, Label_point, "")),  # Seuil ajusté
size = 3,
max.overlaps = 20,
box.padding = 0.3,
point.padding = 0.2,
segment.color = "grey50"
) +
scale_color_manual(values = c("Strong amplification" = "red", "Strong deletion" = "blue", "Weak effect size" = "grey")) +
# Lignes seuils
geom_vline(xintercept = c(-0.27, 0.27), linetype = "dashed", color = "black") +
geom_hline(yintercept = -log10(0.001), linetype = "dashed", color = "black") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5)  # <-- Centrage du titre
) +
labs(
title = "Volcano plot of significant chromosomic arms",
x = "Effect size",
y = "-log10(p-value-adjusted) - alpha = 0.001",
color = "Alterations"
)
ggsave(plot_size_effect, filename = "Volcano_Plot.png", width = 20, height = 10)
plot_size_effect
hist(df_size_effect$size_effect, breaks = 50)
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
hist(df_size_effect$size_effect, breaks = 50)
# Faire un Volcano Plot
df_plot_size_effect$significance <- "Weak effect size"
df_plot_size_effect$significance[df_plot_size_effect$size_effect > 0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong amplification"
df_plot_size_effect$significance[df_plot_size_effect$size_effect < -0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong deletion"
library(ggplot2)
library(ggrepel)
# Plot
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = size_effect,
y = FC,
color = significance)) +
geom_point(alpha = 0.6, size = 2) +
# Ajouter les labels sans chevauchement
geom_text_repel(
aes(label = ifelse(significance == "Strong amplification" | significance == "Strong deletion", Label_point, "")),  # Seuil à ajusté
size = 3,
max.overlaps = 20,
box.padding = 0.3,
point.padding = 0.2,
segment.color = "grey50"
) +
scale_color_manual(values = c("Strong amplification" = "red", "Strong deletion" = "blue", "Weak effect size" = "grey")) +
# Lignes seuils
geom_vline(xintercept = c(-0.27, 0.27), linetype = "dashed", color = "black") +
geom_hline(yintercept = -log10(0.001), linetype = "dashed", color = "black") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5)  # <-- Centrage du titre
) +
labs(
title = "Volcano plot of significant chromosomic arms",
x = "Effect size",
y = "-log10(p-value-adjusted) - alpha = 0.001",
color = "Alterations"
)
plot_size_effect
ggsave(plot_size_effect, filename = "Volcano_Plot.png", width = 20, height = 10)
hist(df_size_effect$size_effect, breaks = 50, main = "Histogramme des size_effect", xlab = "Size effect", col = "lightblue", border = "black")
# Tracer l'histogramme sans l'axe des x par défaut
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.05))
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.05))
# Tracer l'histogramme sans l'axe des x par défaut
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.05))
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.05))
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.1))
Idents(MpBC_obj) <- "seurat_clusters_rename"
# Les meilleurs marqueurs par cluster
top_markers_list  <- markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC) %>%
ungroup() %>%
group_split(cluster)
top_markers_list_minpct_0.5 <- markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC) %>%
ungroup() %>%
group_split(cluster)
# FeaturePlot pour voir l'expression spatiale d'un gène d'intérêt
top_markers_list <- top_markers_list_minpct_0.5
deg_epi <- top_markers_list[[2]]$gene  # Premier gène du cluster Épithelial
deg_mes_tum <- top_markers_list[[4]]$gene  # Premier gène du cluster Mesenchymal_tum
deg_mes_norm <- top_markers_list[[3]]$gene  # Premier gène du cluster Mesenchymal_norm
deg_spindle <- top_markers_list[[6]]$gene  # Premier gène du cluster Spindle_tum
deg_squam <- top_markers_list[[7]]$gene  # Premier gène du cluster Squamous_tum
deg_osteo <- top_markers_list[[5]]$gene  # Premier gène du cluster Osteo_tum
deg_chondro <- top_markers_list[[1]]$gene  # Premier gène du cluster Chondro_tum
list_cluster_genes <- list(
"Epi_tum" = list(deg_epi),
"Mes_tum" = list(deg_mes_tum),
"Mes_norm" = list(deg_mes_norm),
"Spindle_tum" = list(deg_spindle),
"Squam_tum" = list(deg_squam),
"Osteo_tum" = list(deg_osteo),
"Chondro_tum" = list(deg_chondro)
)
# Boucle sur les noms des clusters
for (cluster_name in names(list_cluster_genes)) {
length_deg_list <- length(list_cluster_genes[[cluster_name]][[1]])
for (gene_index in c(1:length_deg_list) ) {
gene <- list_cluster_genes[[cluster_name]][[1]][[gene_index]]  # Accéder au premier gène de la liste
# Créer le FeaturePlot pour le gène correspondant
p <- FeaturePlot(
object = MpBC_obj,
features = gene,
reduction = "umap",
label = TRUE,
repel = TRUE) +
ggtitle(paste0(gene, " gene in the ", cluster_name, " archetype"))
# Afficher le plot
print(p)
# Sauvegarder le plot
ggsave(paste0("FeaturePlot_", cluster_name, "_", gene, ".pdf"), plot = p, width = 12, height = 6, dpi = 300, limitsize = FALSE)
}
}
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
# Tracer l'histogramme sans l'axe des x par défaut
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.1))
# Faire un Volcano Plot
df_plot_size_effect$significance <- "Weak effect size"
df_plot_size_effect$significance[df_plot_size_effect$size_effect > 0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong amplification"
df_plot_size_effect$significance[df_plot_size_effect$size_effect < -0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong deletion"
library(ggplot2)
library(ggrepel)
# Plot
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = size_effect,
y = FC,
color = significance)) +
geom_point(alpha = 0.6, size = 2) +
# Ajouter les labels sans chevauchement
geom_text_repel(
aes(label = ifelse(significance == "Strong amplification" | significance == "Strong deletion", Label_point, "")),  # Seuil à ajusté
size = 3,
max.overlaps = 20,
box.padding = 0.3,
point.padding = 0.2,
segment.color = "grey50"
) +
scale_color_manual(values = c("Strong amplification" = "red", "Strong deletion" = "blue", "Weak effect size" = "grey")) +
# Lignes seuils
geom_vline(xintercept = c(-0.27, 0.27), linetype = "dashed", color = "black") +
geom_hline(yintercept = -log10(0.001), linetype = "dashed", color = "black") +
theme_minimal() +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5)  # <-- Centrage du titre
) +
labs(
title = "Volcano plot of significant chromosomic arms",
x = "Effect size",
y = "-log10(p-value-adjusted) - alpha = 0.001",
color = "Alterations"
)
plot_size_effect
ggsave(plot_size_effect, filename = "Volcano_Plot.png", width = 20, height = 10)
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
# Tracer l'histogramme sans l'axe des x par défaut
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.1))
# Faire un Volcano Plot
df_plot_size_effect$significance <- "Weak effect size"
df_plot_size_effect$significance[df_plot_size_effect$size_effect > 0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong amplification"
df_plot_size_effect$significance[df_plot_size_effect$size_effect < -0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong deletion"
library(ggplot2)
library(ggrepel)
# Plot
library(ggplot2)
library(ggrepel)
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = size_effect,
y = FC,
color = significance)) +
# Points
geom_point(alpha = 0.7, size = 3) +
# Labels pour les points significatifs uniquement
geom_text_repel(
aes(label = ifelse(significance %in% c("Strong amplification", "Strong deletion"), Label_point, "")),
size = 3,
max.overlaps = 30,
box.padding = 0.4,
point.padding = 0.3,
segment.color = "grey60",
show.legend = FALSE
) +
# Couleurs personnalisées
scale_color_manual(values = c(
"Strong amplification" = "#D73027",  # Rouge profond
"Strong deletion" = "#4575B4",       # Bleu foncé
"Weak effect size" = "grey70"
)) +
# Lignes de seuil
geom_vline(xintercept = c(-0.27, 0.27), linetype = "dashed", color = "black") +
geom_hline(yintercept = -log10(0.001), linetype = "dashed", color = "black") +
# Thème et personnalisation
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(color = "black"),
axis.title = element_text(face = "bold"),
legend.position = "right"
) +
# Titres et légende
labs(
title = "Volcano Plot of Significant Chromosomal Arms",
x = "Effect Size (Δ CNA between tissues)",
y = expression(-log[10]~"(Adjusted p-value)"),
color = "Alteration"
)
plot_size_effect
ggsave(plot_size_effect, filename = "Volcano_Plot.png", width = 20, height = 10)
# Connaitre les quantiles de size_effect
quantile(abs(df_size_effect$size_effect), probs = c(0.75, 0.9, 0.95))
# Tracer l'histogramme sans l'axe des x par défaut
hist(df_size_effect$size_effect,
breaks = 50,
main = "Histogramme des size_effect",
xlab = "Size effect",
col = "lightblue",
border = "black",
xaxt = "n")  # Supprime l'axe x par défaut
# Ajouter un axe x plus détaillé
axis(side = 1, at = seq(-1, 1, by = 0.1))
# Faire un Volcano Plot
df_plot_size_effect$significance <- "Weak effect size"
df_plot_size_effect$significance[df_plot_size_effect$size_effect > 0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong amplification"
df_plot_size_effect$significance[df_plot_size_effect$size_effect < -0.27 & df_plot_size_effect$p_value_adj_Bonferroni_1vsAll < 0.001] <- "Strong deletion"
library(ggplot2)
library(ggrepel)
# Plot
library(ggplot2)
library(ggrepel)
plot_size_effect <- ggplot(df_plot_size_effect, aes(x = size_effect,
y = FC,
color = significance)) +
# Points
geom_point(alpha = 0.7, size = 3) +
# Labels pour les points significatifs uniquement
geom_text_repel(
aes(label = ifelse(significance %in% c("Strong amplification", "Strong deletion"), Label_point, "")),
size = 3,
max.overlaps = 30,
box.padding = 0.4,
point.padding = 0.3,
segment.color = "grey60",
show.legend = FALSE
) +
# Couleurs personnalisées
scale_color_manual(values = c(
"Strong amplification" = "red",  # Rouge profond
"Strong deletion" = "blue",       # Bleu foncé
"Weak effect size" = "grey70"
)) +
# Lignes de seuil
geom_vline(xintercept = c(-0.27, 0.27), linetype = "dashed", color = "black") +
geom_hline(yintercept = -log10(0.001), linetype = "dashed", color = "black") +
# Thème et personnalisation
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.text = element_text(color = "black"),
axis.title = element_text(face = "bold"),
legend.position = "right"
) +
# Titres et légende
labs(
title = "Volcano Plot of Significant Chromosomal Arms",
x = "Effect Size (Δ CNA between tissues)",
y = expression(-log[10]~"(Adjusted p-value)"),
color = "Alteration"
)
plot_size_effect
ggsave(plot_size_effect, filename = "Volcano_Plot.png", width = 20, height = 10)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(ggplot2)
library(dplyr)
library(tidyr)
library(hdf5r)
library(ggfortify)
library(harmony)
library(sctransform)
library(viridis)
library(stringr)
library(viridisLite)
library(patchwork)
library(matrixStats)
library(ggpubr)
library(infercnvPlus)
library(gtools)
library(colorspace)
library(Polychrome)
dir_path <- "/mnt/datadisk/Jordan/Data/"
# Liste des échantillons à traiter (excluant MpBC12)
samples <- paste0("MpBC", c(1:11, 13:16))
# Liste des patients par pathologie
Squam_tum_patients <- c("MpBC3", "MpBC8")
Epi_tum_patients <- c("MpBC1", "MpBC2", "MpBC5", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16")
Mes_tum_patients <- c("MpBC1", "MpBC8")
Mes_norm_patients <- c("MpBC1", "MpBC2", "MpBC5", "MpBC6", "MpBC9", "MpBC11", "MpBC14", "MpBC15")
Spindle_tum_patients <- c("MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC10", "MpBC11", "MpBC14")
Osteo_tum_patients <- c("MpBC4")
Chondro_tum_patients <- c("MpBC9", "MpBC13", "MpBC15", "MpBC16")
cnv_obj <- readRDS("/mnt/datadisk/Jordan/Data/CNA/cnv_obj_bis_MpBC1.rds")
# Plotting InferCNVplus results
cnv_obj <- visualCNV(data = cnv_obj,
cutree_k = 1,
out_file = "plot_cnv.png")
