metric = "euclidean")
View(MpBC8)
View(MpBC8@meta.data)
# On merge nos objet en un seul
all_data_init <- merge(MpBC1,
y = list(MpBC2, MpBC3, MpBC4, MpBC5, MpBC6, MpBC7, MpBC8, MpBC9, MpBC10, MpBC11, MpBC13, MpBC14, MpBC15, MpBC16),
add.cell.ids = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
# Convertir les données dans orig.ident en facteur
all_data_init$Patient <- factor(all_data_init$Patient, levels = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
all_data_init$Seq_batch <- factor(all_data_init$Seq_batch, levels = c("batch1", "batch2"))
all_data_init$Visium_slide <- factor(all_data_init$Visium_slide, levels = c("slide1", "slide2", "slide3", "slide4", "slide5", "slide6", "slide7", "slide8"))
# On enlève certains types cellulaires (difficilement caractérisables)
all_data_init <- all_data_init %>%
# subset(nCount_Spatial > -1 & nFeature_Spatial > -1 & nCount_Spatial < 100000 & nFeature_Spatial < 100000 &
subset(nCount_Spatial > 0 &
Annotations_old != "Mixed cells" &
Annotations_new != "Pleiomorphic tumor" &
Annotations_old != "NST surrounded by spindle" &
Annotations_old != "" & Annotations_new != "")
VlnPlot(all_data_init, features = c("nFeature_Spatial", "nCount_Spatial"), ncol = 2, group.by = "Annotations_new")
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear") %>%
RunPCA(assay = "Spatial",
npcs = 50) %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE) %>%
RunUMAP(assay = "Spatial",
reduction = "harmony",
dims = 1:50,
n.neighbors = 100,
min.dist = 0.001,
spread = 2,
set.op.mix.ratio = 1,
metric = "euclidean")
neighbours_number_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["n.neighbors"]]
n_components_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["dims"]] %>% length()
features_number_all <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
min_dist_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["min.dist"]]
set_op_mix_ratio_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["set.op.mix.ratio"]]
spread_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["spread"]]
scale_factor_all <- all_data@commands[["NormalizeData.Spatial"]]@params[["scale.factor"]]
vars_to_regress_all <- all_data@commands[["ScaleData.Spatial"]]@params[["vars.to.regress"]]
p1 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
p2 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " ,scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "new_annot.png"), plot = p1, width = 12, height = 6, dpi = 300, limitsize = FALSE)
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "old_annot.png"), plot = p2, width = 12, height = 6, dpi = 300, limitsize = FALSE)
print(paste("UMAP done"))
p3 <- DimPlot(all_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_new",
shape.by = "Patient") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "patient_shape_new_annot.png"), plot = p3, width = 12, height = 6, dpi = 300, limitsize = FALSE)
# Plot pour tous les patients --- New annot ---
# Extraire la liste des patients
patients_list <- unique(all_data$Patient)
# Boucle pour générer un plot par patient et le sauvegarder
for (patient in patients_list) {
# Filtrer les données pour un patient spécifique
patient_data <- subset(all_data, subset = (Patient == patient))
# Créer le plot pour ce patient
plot_patient <- DimPlot(patient_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients (", patient,") - Normalized Data (" ,features_number_all, " Genes) - UMAP - new_annot"))
# Sauvegarder l'image pour ce patient
ggsave(filename = paste0("All-Patients-(", patient,")_NormalizedData-(" ,features_number_all, " Genes)_UMAP_new-annot.png"),
plot = plot_patient, width = 12, height = 6, dpi = 300)
print(plot_patient)
print(paste("Plot saved for Patient:", patient))
}
p4 <- DimPlot(all_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_old",
shape.by = "Patient") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "patient_shape_old_annot.png"), plot = p4, width = 12, height = 6, dpi = 300, limitsize = FALSE)
# Plot pour tous les patients --- Old annot ---
# Extraire la liste des patients
patients_list <- unique(all_data$Patient)
# Boucle pour générer un plot par patient et le sauvegarder
for (patient in patients_list) {
# Filtrer les données pour un patient spécifique
patient_data <- subset(all_data, subset = (Patient == patient))
# Créer le plot pour ce patient
plot_patient <- DimPlot(patient_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients (", patient,") - Normalized Data (" ,features_number_all, " Genes) - UMAP - old_annot"))
# Sauvegarder l'image pour ce patient
ggsave(filename = paste0("All-Patients-(", patient,")_NormalizedData-(" ,features_number_all, " Genes)_UMAP_old-annot.png"),
plot = plot_patient, width = 12, height = 6, dpi = 300)
print(plot_patient)
print(paste("Plot saved for Patient:", patient))
}
View(MpBC8)
View(MpBC8@meta.data)
# On merge nos objet en un seul
all_data_init <- merge(MpBC1,
y = list(MpBC2, MpBC3, MpBC4, MpBC5, MpBC6, MpBC7, MpBC8, MpBC9, MpBC10, MpBC11, MpBC13, MpBC14, MpBC15, MpBC16),
add.cell.ids = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
# Convertir les données dans orig.ident en facteur
all_data_init$Patient <- factor(all_data_init$Patient, levels = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
all_data_init$Seq_batch <- factor(all_data_init$Seq_batch, levels = c("batch1", "batch2"))
all_data_init$Visium_slide <- factor(all_data_init$Visium_slide, levels = c("slide1", "slide2", "slide3", "slide4", "slide5", "slide6", "slide7", "slide8"))
# On enlève certains types cellulaires (difficilement caractérisables)
all_data_init <- all_data_init %>%
# subset(nCount_Spatial > -1 & nFeature_Spatial > -1 & nCount_Spatial < 100000 & nFeature_Spatial < 100000 &
subset(nCount_Spatial > 0 &
Annotations_old != "Mixed cells" &
Annotations_new != "Pleiomorphic tumor" &
Annotations_old != "NST surrounded by spindle" &
Annotations_old != "" & Annotations_new != "",
Annotations_old != "Necrosis" & Annotations_new != "Necrosis")
# On merge nos objet en un seul
all_data_init <- merge(MpBC1,
y = list(MpBC2, MpBC3, MpBC4, MpBC5, MpBC6, MpBC7, MpBC8, MpBC9, MpBC10, MpBC11, MpBC13, MpBC14, MpBC15, MpBC16),
add.cell.ids = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
# Convertir les données dans orig.ident en facteur
all_data_init$Patient <- factor(all_data_init$Patient, levels = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8", "MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
all_data_init$Seq_batch <- factor(all_data_init$Seq_batch, levels = c("batch1", "batch2"))
all_data_init$Visium_slide <- factor(all_data_init$Visium_slide, levels = c("slide1", "slide2", "slide3", "slide4", "slide5", "slide6", "slide7", "slide8"))
# On enlève certains types cellulaires (difficilement caractérisables)
all_data_init <- all_data_init %>%
# subset(nCount_Spatial > -1 & nFeature_Spatial > -1 & nCount_Spatial < 100000 & nFeature_Spatial < 100000 &
subset(nCount_Spatial > 0 &
Annotations_old != "Mixed cells" &
Annotations_new != "Pleiomorphic tumor" &
Annotations_old != "NST surrounded by spindle" &
Annotations_old != "" & Annotations_new != "" &
Annotations_old != "Necrosis" & Annotations_new != "Necrosis")
VlnPlot(all_data_init, features = c("nFeature_Spatial", "nCount_Spatial"), ncol = 2, group.by = "Annotations_new")
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear") %>%
RunPCA(assay = "Spatial",
npcs = 50) %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE) %>%
RunUMAP(assay = "Spatial",
reduction = "harmony",
dims = 1:50,
n.neighbors = 100,
min.dist = 0.001,
spread = 2,
set.op.mix.ratio = 1,
metric = "euclidean")
neighbours_number_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["n.neighbors"]]
n_components_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["dims"]] %>% length()
features_number_all <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
min_dist_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["min.dist"]]
set_op_mix_ratio_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["set.op.mix.ratio"]]
spread_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["spread"]]
scale_factor_all <- all_data@commands[["NormalizeData.Spatial"]]@params[["scale.factor"]]
vars_to_regress_all <- all_data@commands[["ScaleData.Spatial"]]@params[["vars.to.regress"]]
p1 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
p2 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " ,scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "new_annot.png"), plot = p1, width = 12, height = 6, dpi = 300, limitsize = FALSE)
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "old_annot.png"), plot = p2, width = 12, height = 6, dpi = 300, limitsize = FALSE)
print(paste("UMAP done"))
p3 <- DimPlot(all_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_new",
shape.by = "Patient") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "patient_shape_new_annot.png"), plot = p3, width = 12, height = 6, dpi = 300, limitsize = FALSE)
# Plot pour tous les patients --- New annot ---
# Extraire la liste des patients
patients_list <- unique(all_data$Patient)
# Boucle pour générer un plot par patient et le sauvegarder
for (patient in patients_list) {
# Filtrer les données pour un patient spécifique
patient_data <- subset(all_data, subset = (Patient == patient))
# Créer le plot pour ce patient
plot_patient <- DimPlot(patient_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients (", patient,") - Normalized Data (" ,features_number_all, " Genes) - UMAP - new_annot"))
# Sauvegarder l'image pour ce patient
ggsave(filename = paste0("All-Patients-(", patient,")_NormalizedData-(" ,features_number_all, " Genes)_UMAP_new-annot.png"),
plot = plot_patient, width = 12, height = 6, dpi = 300)
print(plot_patient)
print(paste("Plot saved for Patient:", patient))
}
# Plot UMAP avec les shape des patients
## UMAP totale
p4 <- DimPlot(all_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_old",
shape.by = "Patient") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "patient_shape_old_annot.png"), plot = p4, width = 12, height = 6, dpi = 300, limitsize = FALSE)
# Plot pour tous les patients --- Old annot ---
# Extraire la liste des patients
patients_list <- unique(all_data$Patient)
# Boucle pour générer un plot par patient et le sauvegarder
for (patient in patients_list) {
# Filtrer les données pour un patient spécifique
patient_data <- subset(all_data, subset = (Patient == patient))
# Créer le plot pour ce patient
plot_patient <- DimPlot(patient_data,
pt.size = 1,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients (", patient,") - Normalized Data (" ,features_number_all, " Genes) - UMAP - old_annot"))
# Sauvegarder l'image pour ce patient
ggsave(filename = paste0("All-Patients-(", patient,")_NormalizedData-(" ,features_number_all, " Genes)_UMAP_old-annot.png"),
plot = plot_patient, width = 12, height = 6, dpi = 300)
print(plot_patient)
print(paste("Plot saved for Patient:", patient))
}
library(Seurat)
library(ggplot2)
library(dplyr)
library(hdf5r)
library(ggfortify)
library(harmony)
library(sctransform)
library(viridis)
library(stringr)
library(viridisLite)
library(patchwork)
dir_path <- "/mnt/datadisk/Jordan/Data/"
# Assigner des couleurs aux groupes en respectant la proximité biologique
annotation_colors <- c(
"Chondroid tumor" = "#8B4513",          # Marron (cartilage)
"Epithelial tumor" = "#FF4500",         # Orange vif
"Epithelial/Mesenchymal tumor" = "#9400D3", # Violet profond (intermédiaire)
"Mesenchymal tumor" = "#1E90FF",        # Bleu intense
"Normal epithelium" = "#32CD32",        # Vert clair
"Normal mesenchyme" = "#00CED1",        # Turquoise
"Osteosarcomatoid tumor" = "black",   # Brun terreux
"Pleiomorphic tumor" = "#B22222",       # Rouge bordeaux
"Spindle cell tumor" = "#4682B4",       # Bleu acier
"Squamous tumor" = "grey"            # Rouge tomate
)
colors_old <- c(
"Chondroid tumour cells" = "#E6194B",
"Classical chondrosarcoma cells" = "#3CB44B",
"Epithelial tumor cells" = "#FFE119",
"Mesenchymal tumor cells" = "#4363D8",
"Mixoid chondrosarcoma cells" =  "#F58231",
"Mixoid matrix-enriched spindle+ spindle" = "#911EB4",
"MMP9- spindle" = "#46F0F0",
"MMP9+ spindle" = "#F032E6",
"Normal epithelium" = "#D2F53C",
"Normal fibrous tissue" = "#FABEBE",
"NST cells" = "#008080",
"Osteosarcomatoid tumour" = "#E6BEFF",
"Spindle cell tumour" = "#AA6E28",
"Spindle surrounded by NST" = "#FFFAC8",
"Squamous cell tumour" = "#800000", "#AaffC3", "#808000", "#000080"
)
shape_patients = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
for (s in c(5000, 8000, 9000, 11000, 12000, 15000)) {
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = s) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear") %>%
RunPCA(assay = "Spatial",
npcs = 50) %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE)
# for (n in c(30, 35, 40, 45, 50)) {
for (i in c(0.0001)) {
all_data <- all_data %>%
RunUMAP(assay = "Spatial",
reduction = "harmony",
dims = 1:50,
n.neighbors = 100,
min.dist = i,
spread = 2,
opmixratio = 1,
metric = "euclidean")
neighbours_number_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["n.neighbors"]]
n_components_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["dims"]] %>% length()
features_number_all <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
min_dist_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["min.dist"]]
set_op_mix_ratio_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["set.op.mix.ratio"]]
spread_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["spread"]]
scale_factor_all <- all_data@commands[["NormalizeData.Spatial"]]@params[["scale.factor"]]
vars_to_regress_all <- all_data@commands[["ScaleData.Spatial"]]@params[["vars.to.regress"]]
p1 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
p2 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " ,scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "new_annot.png"), plot = p1, width = 12, height = 6, dpi = 300, limitsize = FALSE)
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "old_annot.png"), plot = p2, width = 12, height = 6, dpi = 300, limitsize = FALSE)
print(paste0("UMAP with variable done for ", n_components_all, " components and ", neighbours_number_all, " neighbors and ", scale_factor_all, " scale and mindist ", min_dist_all ))
# }
}
}
# Neighbors : Pas de grande différence de 10 à 40 (peut etre un peu mieux à partir de 50 mais pas de diff au dela de 100) ==> On va garder 100
# 40 composantes semble etre l'ideal
# min_dist = 0.001 semble le mieux
# opmixratio = 1 semble le mieux
# spread = 2 semble le mieux
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear") %>%
RunPCA(assay = "Spatial",
npcs = 50) %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE) %>%
RunUMAP(assay = "Spatial",
reduction = "harmony",
dims = 1:50,
n.neighbors = 100,
min.dist = 0.001,
spread = 2,
set.op.mix.ratio = 1,
metric = "euclidean")
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear") %>%
RunPCA(assay = "Spatial",
npcs = 50) %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE) %>%
RunUMAP(assay = "Spatial",
reduction = "harmony",
dims = 1:50,
n.neighbors = 100,
min.dist = 0.001,
spread = 2,
set.op.mix.ratio = 1,
metric = "euclidean")
neighbours_number_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["n.neighbors"]]
n_components_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["dims"]] %>% length()
features_number_all <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
min_dist_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["min.dist"]]
set_op_mix_ratio_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["set.op.mix.ratio"]]
spread_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["spread"]]
scale_factor_all <- all_data@commands[["NormalizeData.Spatial"]]@params[["scale.factor"]]
vars_to_regress_all <- all_data@commands[["ScaleData.Spatial"]]@params[["vars.to.regress"]]
p1 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " , scale_factor_all, " scale) - new_annot"))
p2 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - UMAP (" , neighbours_number_all, " Neighbours, ", n_components_all, " composantes " ,scale_factor_all, " scale) - old_annot"))
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "new_annot.png"), plot = p1, width = 12, height = 6, dpi = 300, limitsize = FALSE)
ggsave(filename = paste0(neighbours_number_all, " neighrbours ", n_components_all, " component ", features_number_all, " features ", min_dist_all, " mindist ", set_op_mix_ratio_all, " opmix ", spread_all, " spread ", scale_factor_all, " scale ", "old_annot.png"), plot = p2, width = 12, height = 6, dpi = 300, limitsize = FALSE)
print(paste("UMAP done"))
all_data <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 50,
model.use = "linear")
features_number_all <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
all_data <- RunPCA(all_data,
assay = "Spatial",
npcs = 50)
ElbowPlot(all_data, ndims = 50) + ggtitle(paste0("All Patients - Normalized Data (" , features_number_all, " Genes) - PCA"))
all_data <- RunHarmony(all_data,
c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE)
DimPlot(all_data,
pt.size = 1,
reduction = "harmony",
group.by = "Patient") +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - Harmony"))
all_data <- RunHarmony(all_data,
c("Patient", "Seq_batch", "Visium_slide"),
theta = c(6, 4, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE)
DimPlot(all_data,
pt.size = 1,
reduction = "harmony",
group.by = "Patient") +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number_all, " Genes) - Harmony"))
