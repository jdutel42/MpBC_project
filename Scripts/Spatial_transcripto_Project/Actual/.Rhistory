names_obj_list <- c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8",
"MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16")
all_data_init <- merge(MpBC1,
y = obj_list,
add.cell.ids = names_obj_list,
project = "MpBC_Visium",
merge.data = TRUE)
# Convertir les données dans orig.ident en facteur
all_data_init$Patient <- factor(all_data_init$Patient,
levels = c("MpBC1", "MpBC2", "MpBC3", "MpBC4", "MpBC5", "MpBC6", "MpBC7", "MpBC8",
"MpBC9", "MpBC10", "MpBC11", "MpBC13", "MpBC14", "MpBC15", "MpBC16"))
all_data_init$Seq_batch <- factor(all_data_init$Seq_batch,
levels = c("batch1", "batch2"))
all_data_init$Visium_slide <- factor(all_data_init$Visium_slide,
levels = c("slide1", "slide2", "slide3", "slide4",
"slide5", "slide6", "slide7", "slide8"))
# VariableFeatures(all_data_init[["SCT"]]) <- rownames(all_data_init[["SCT"]]@scale.data)
# all_data_init <- JoinLayers(all_data_init)
VlnPlot(all_data_init,
features = c("nFeature_Spatial", "nCount_Spatial"),
ncol = 2,
group.by = "Patient",
pt.size = 0.1,
alpha = 0.35)
# ggsave("VlnPlot_MpBC_Patient.png", width = 12, height = 6, dpi = 300)
VlnPlot(all_data_init,
features = c("nFeature_Spatial", "nCount_Spatial"),
ncol = 2,
group.by = "Annotations_new",
pt.size = 0.1,
alpha = 0.35)
# ggsave("VlnPlot_MpBC_Annotations_new.png", width = 12, height = 6, dpi = 300)
all_data_init <- all_data_init %>%
NormalizeData(assay = "Spatial",
normalization.method = "LogNormalize",
scale.factor = 5000) %>%
FindVariableFeatures(selection.method = "vst",
nfeatures = 750) %>%
ScaleData(do.scale = TRUE,
do.center = TRUE,
scale.max = 10,
model.use = "linear")
all_data <- RunPCA(all_data_init,
assay = "Spatial",
npcs = 50)
ElbowPlot(all_data,
ndims = 50) + ggtitle(paste0("ElbowPlot - ND(750-75-40-5000)"))
theta_param <- c(2,2,2)
sigma_param <- 0.2
nclust_param <- 150
all_data <- all_data %>%
RunHarmony(c("Patient", "Seq_batch", "Visium_slide"),
theta = c(2, 2, 2),
lambda = 1,
sigma = 0.2,
nclust = 150,
max_iter = 50,
verbose = TRUE)
features_number <- all_data@commands[["FindVariableFeatures.Spatial"]]@params[["nfeatures"]]
plot9 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "harmony",
group.by = "Patient") +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" , features_number, " Genes) - Harmony"))
plot9
plot8 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "harmony",
group.by = "Seq_batch") +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number, " Genes) - Harmony"))
plot8
plot7 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "harmony",
group.by = "Visium_slide") +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" ,features_number, " Genes) - Harmony"))
plot7
plot1_all <- DimPlot(all_data,
pt.size = 1,
reduction = "harmony",
group.by = "Annotations_new",
shape.by = 'Patient') +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
ggtitle(paste0("All Patients - Normalized Data (" , features_number, " Genes) - Harmony - new_annot"))
# png(paste0("All-patients_NormalizedData(",features_number, "Genes)_HARMONY_new-annot_(222)_", sigma_param, "_", nclust_param ,".png"), width = 6000, height = 3000, res = 300)
print(plot1_all)
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_shape_manual(values = shape_patients) +
# scale_color_manual(values = annotation_colors) +
ggtitle(paste0("PCA - MpBC"))
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Annotations_new") +
# scale_shape_manual(values = shape_patients) +
scale_color_manual(values = annotation_colors) +
ggtitle(paste0("PCA - MpBC"))
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_shape_manual(values = shape_patients) +
# scale_color_manual(values = annotation_colors) +
ggtitle(paste0("PCA - MpBC"))
color_patient = c(
"MpBC1" = "#FF0000",
"MpBC2" = "#00FF00",
"MpBC3" = "#0000FF",
"MpBC4" = "#FFFF00",
"MpBC5" = "#FF00FF",
"MpBC6" = "#00FFFF",
"MpBC7" = "#FFA500",
"MpBC8" = "#800080",
"MpBC9" = "#008000",
"MpBC10" = "#000080",
"MpBC11" = "#808080",
"MpBC12" = "#FFC0CB",
"MpBC13" = "#A52A2A",
"MpBC14" = "#D2691E",
"MpBC15" = "#CD5C5C",
"MpBC16" = "#B8860B"
)
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
# scale_shape_manual(values = shape_patients) +
scale_color_manual(values = color_patient) +
ggtitle(paste0("PCA - MpBC"))
library(Seurat)
library(ggplot2)
library(ggsci)
# Palette
color_patient <- pal_aaas()(length(unique(all_data$Patient)))
# Variance
pca_var <- Stdev(all_data[["pca"]])^2
pca_var <- round(100 * pca_var / sum(pca_var), 1)
# Plot
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_color_manual(values = color_patient) +
labs(title = "Analyse en composantes principales (ACP) des patientes atteintes de MpBC",
color = "Patiente",
x = paste0("PC1 (", pca_var[1], "%)"),
y = paste0("PC2 (", pca_var[2], "%)")) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
color_patient = c(
"MpBC1" = "#FF0000",
"MpBC2" = "#00FF00",
"MpBC3" = "#0000FF",
"MpBC4" = "#FFFF00",
"MpBC5" = "#FF00FF",
"MpBC6" = "#00FFFF",
"MpBC7" = "#FFA500",
"MpBC8" = "#800080",
"MpBC9" = "#008000",
"MpBC10" = "#000080",
"MpBC11" = "#808080",
"MpBC12" = "#FFC0CB",
"MpBC13" = "#A52A2A",
"MpBC14" = "#D2691E",
"MpBC15" = "#CD5C5C",
"MpBC16" = "#B8860B"
)
# Plot
DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_color_manual(values = color_patient) +
labs(title = "Analyse en composantes principales (ACP) des patientes atteintes de MpBC",
color = "Patiente",
x = paste0("PC1 (", pca_var[1], "%)"),
y = paste0("PC2 (", pca_var[2], "%)")) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
# Plot
p <- DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_color_manual(values = color_patient) +
labs(
title = "Analyse en composantes principales (ACP) des patientes atteintes de MpBC",
color = "Patiente",
x = paste0("PC1 (", pca_var[1], "%)"),
y = paste0("PC2 (", pca_var[2], "%)")
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggsave("PCA_MpBC_patientes.pdf", plot = p, width = 8, height = 6, units = "in", dpi = 600)
ggsave("PCA_MpBC_patientes.pdf", plot = p, width = 10, height = 6, units = "in", dpi = 600)
# Plot
p <- DimPlot(all_data,
pt.size = 0.75,
reduction = "pca",
group.by = "Patient") +
scale_color_manual(values = color_patient) +
labs(
title = "Analyse en composantes principales (ACP) des patientes MpBC",
color = "Patiente",
x = paste0("PC1 (", pca_var[1], "%)"),
y = paste0("PC2 (", pca_var[2], "%)")
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
ggsave("PCA_MpBC_patientes.pdf", plot = p, width = 8, height = 6, units = "in", dpi = 600)
ggsave("PCA_MpBC_patientes.pdf", plot = p, width = 10, height = 6, units = "in", dpi = 600)
library(grid)  # pour gérer les marges
library(ggplot2)
# Créer la figure améliorée
plot1_all <- DimPlot(all_data,
pt.size = 1,
reduction = "harmony",
group.by = "Annotations_new",
shape.by = "Patient") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
labs(
title = paste0("Données normalisées (", features_number, " gènes)\nRéduction Harmony - Annotations par type cellulaire"),
color = "Type cellulaire",
shape = "Patiente"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 11),
plot.margin = unit(c(1.5, 1, 1, 1), "cm")
)
plot1_all
# Création de la figure Harmony
p_harmony <- DimPlot(all_data,
pt.size = 0.75,
reduction = "harmony",
group.by = "Patient",
) +
scale_color_manual(values = color_patient) +
labs(
title = paste0("Réduction Harmony - Patientes MpBC (", features_number, " gènes)"),
color = "Patiente",
x = "Composante 1",
y = "Composante 2"
)
p_harmony
ggsave("Harmony_MpBC_patientes.pdf", plot = p_harmony_patiente, width = 10, height = 6, units = "in", dpi = 600)
# Création de la figure Harmony
p_harmony_patiente <- DimPlot(all_data,
pt.size = 0.75,
reduction = "harmony",
group.by = "Patient",
) +
scale_color_manual(values = color_patient) +
labs(
title = paste0("Réduction Harmony - Patientes MpBC (", features_number, " gènes)"),
color = "Patiente",
x = "Composante 1",
y = "Composante 2"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
p_harmony_patiente
p_harmony_patiente
ggsave("Harmony_MpBC_patientes.pdf", plot = p_harmony_patiente, width = 10, height = 6, units = "in", dpi = 600)
p_harmony_annotation <- DimPlot(all_data,
pt.size = 0.75,
reduction = "harmony",
group.by = "Annotations_new",
) +
scale_color_manual(values = annotation_colors) +
labs(
title = paste0("Réduction Harmony - Sous-types tumoraux (", features_number, " gènes)"),
color = "Sous-types tumoraux",
x = "Composante 1",
y = "Composante 2"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 12)
)
p_harmony_annotation
ggsave("Harmony_MpBC_annotation.pdf", plot = p_harmony_annotation, width = 10, height = 6, units = "in", dpi = 600)
all_data <- all_data %>%
RunUMAP(assay = "Spatial",
seed.use = 42,
reduction = "harmony",
dims = 1:20,
n.neighbors = 75,
min.dist = 0.0001,
spread = 2,
set.op.mix.ratio = 1,
metric = "cosine") # euclidean et cosine c'est pas mal
neighbours_number_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["n.neighbors"]]
n_components_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["dims"]] %>% length()
min_dist_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["min.dist"]]
set_op_mix_ratio_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["set.op.mix.ratio"]]
spread_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["spread"]]
scale_factor_all <- all_data@commands[["NormalizeData.Spatial"]]@params[["scale.factor"]]
metric_all <- all_data@commands[["RunUMAP.Spatial.harmony"]]@params[["metric"]]
plot2 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_new") +
scale_color_manual(values = annotation_colors) +
scale_shape_manual(values = shape_patients) +
# ggtitle(paste0("All Patients - Normalized Data (" ,features_number, " Genes) - UMAP"))
ggtitle(paste0("UMAP - MpBC patients"))
plot2
# ggsave(filename = paste0("Opti_All-Patients_NormalizedData(",features_number, "_", neighbours_number_all, "_", n_components_all , "_", min_dist_all , "_", set_op_mix_ratio_all, "_", spread_all , "_", metric_all, "_Genes).pdf"), plot = plot2, width = 12, height = 6, dpi = 300)
plot3 <- DimPlot(all_data,
pt.size = 0.25,
reduction = "umap",
group.by = "Annotations_old") +
scale_color_manual(values = colors_old) +
scale_shape_manual(values = shape_patients) +
# ggtitle(paste0("All Patients - Normalized Data (" ,features_number, " Genes) - UMAP - Old"))
ggtitle(paste0("UMAP - MpBC patients"))
plot3
# ggsave(filename = paste0("Opti_All-Patients_NormalizedData(",features_number, "_", neighbours_number_all, "_", n_components_all , "_", min_dist_all , "_", set_op_mix_ratio_all, "_", spread_all , "_", metric_all, "_Genes)_old.pdf"), plot = plot3, width = 12, height = 6, dpi = 300)
# Extraire la liste des patients
patients_list <- unique(all_data$Patient)
all_data <- FindNeighbors(all_data,
reduction = "harmony",
dims = 1:50)
# Trouver les clusters
for (i in c(0.15)) {
for (a in c(2)) {
all_data <- FindClusters(all_data,
resolution = i,
algorithm = a)
# Visu
# p <- DimPlot(all_data,
#              reduction = "umap",
#              group.by = "seurat_clusters",
#              label = TRUE) +
#           # scale_color_manual(values = cluster_colors) +
#           ggtitle(paste0("Cluster resolution: ", i, " - MultiLouvain Algorithm"))
# print(p)
# ggsave(paste0("cluster_resolution_", i, "_algo_", a, "_no_rename.png"), plot = p, width = 12, height = 6, dpi = 300, limitsize = FALSE)
}
}
# clustree(all_data)
# Intersection des annotations et clusters
all_data@meta.data <- all_data@meta.data %>%
mutate(seurat_clusters_rename = case_when(
# Condition pour cluster Squamous
((seurat_clusters %in% c(3)) & Annotations_new == "Squamous tumor") ~ "Squam_tum",
# Condition pour cluster Mesenchymal tumor
((seurat_clusters %in% c(3)) & Annotations_new == "Mesenchymal tumor") ~ "Mes_tum",
# Condition pour cluster Épithelial
((seurat_clusters %in% c(2, 4, 17, 15, 7, 11, 12)) & Annotations_new == "Epithelial tumor") ~ "Epi_tum",
# Condition pour cluster Spindle
((seurat_clusters %in% c(0, 1, 8, 6, 13, 16)) & Annotations_new == "Spindle cell tumor") ~ "Spindle_tum",
# Condition pour cluster Chondro
((seurat_clusters %in% c(5, 9, 10)) & Annotations_new == "Chondroid tumor") ~ "Chondro_tum",
# Condition pour cluster Osteosarcomatoid
((seurat_clusters %in% c(0)) & Annotations_new == "Osteosarcomatoid tumor") ~ "Osteo_tum",
# Condition pour cluster Mesenchymal normale
(Annotations_new == "Normal mesenchyme") ~ "Mes_norm"
))
# ON enlève les cellules qui n'ont pas de cluster assignés dans seurat_clusters_rename (c-a-d les cellules dont les annotations ne correspondent pas aux clusters trouvés)
MpBC_obj <- all_data %>% subset(subset = (seurat_clusters_rename != ""))
# Visu
p <- DimPlot(MpBC_obj,
reduction = "umap",
group.by = "seurat_clusters_rename",
label = FALSE,
repel = TRUE,
pt.size = 0.25) +
scale_color_manual(values = cluster_colors_v2) +
# annotate("text",
# x = 9, y = -9.5,
# label = "
# Nombre de cellules totales avant intersection: 51536,
# Nombre de cellules enlevées: 9670,
# Nombre de cellules restantes après intersection: 41866,
# Pourcentage de cellules enlevées: 18.76%",
# size = 2,
# color = "black",
# hjust = 0) +
ggtitle(paste0("MultiLouvain Clustering - Intersection with expert annotations"))
print(p)
# ggsave(paste0("MultiLouvain Clustering - Intersection with expert annotations.pdf"), plot = p, width = 12, height = 6, dpi = 300, limitsize = FALSE)
p <- DimPlot(MpBC_obj,
reduction = "umap",
group.by = "seurat_clusters_rename",
label = FALSE,
repel = TRUE,
pt.size = 0.25) +
scale_color_manual(values = cluster_colors_v2) +
labs(
title = "Réduction UMAP - Clustering MultiLouvain croisé avec annotations expertes",
color = "Type tumoral (intersection)"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 11),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
p
# Visu
p <- DimPlot(MpBC_obj,
reduction = "umap",
group.by = "seurat_clusters_rename",
label = FALSE,
repel = TRUE,
pt.size = 0.25) +
scale_color_manual(values = cluster_colors_v2) +
# annotate("text",
# x = 9, y = -9.5,
# label = "
# Nombre de cellules totales avant intersection: 51536,
# Nombre de cellules enlevées: 9670,
# Nombre de cellules restantes après intersection: 41866,
# Pourcentage de cellules enlevées: 18.76%",
# size = 2,
# color = "black",
# hjust = 0) +
ggtitle(paste0("MultiLouvain Clustering - Intersection with expert annotations"))
print(p)
p <- DimPlot(MpBC_obj,
reduction = "umap",
group.by = "seurat_clusters_rename",
label = FALSE,
repel = TRUE,
pt.size = 0.25) +
scale_color_manual(values = cluster_colors_v2) +
labs(
title = "Projection UMAP - Clustering MultiLouvain croisé avec annotations expertes",
color = "Type tumoral (intersection)"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 11),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
p
p <- DimPlot(MpBC_obj,
reduction = "umap",
group.by = "seurat_clusters_rename",
label = FALSE,
repel = TRUE,
pt.size = 0.25) +
scale_color_manual(values = cluster_colors_v2) +
labs(
title = "Projection UMAP - Clustering MultiLouvain croisé avec annotations expertes",
color = "Type tumoral (intersection)"
) +
theme_classic(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
# axis.title = element_blank(),
# axis.text = element_blank(),
# axis.ticks = element_blank(),
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 11),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
p
View(all_data)
View(all_data@meta.data)
ggsave("UMAP_MpBC_Cluster_vs_Annotation.pdf", plot = p, width = 10, height = 6.5, units = "in", dpi = 600)
ggsave("UMAP_MpBC_Cluster_vs_Annotation.pdf", plot = p, width = 12, height = 6.5, units = "in", dpi = 600)
